enclave {
	
	include "../common/SGX/sgx_structs.h"
	
	from "sgx_tkey_exchange.edl" import *;
	
	untrusted 
	{
		int ocall_sgx_ra_send_msg0s([user_check] void* connection_ptr);

		int ocall_sgx_ra_get_msg1(uint64_t enclave_id, uint32_t ra_ctx, [out] sgx_ra_msg1_t* msg1);

		size_t ocall_sgx_ra_proc_msg2(uint64_t enclave_id, uint32_t ra_ctx, [in, size=msg2_size] const sgx_ra_msg2_t* msg2, size_t msg2_size, 
		[out] uint8_t** out_msg3);
	};

	trusted 
	{
	
		public sgx_status_t ecall_sgx_ra_client_init();
		
		public void ecall_sgx_ra_client_terminate();

		public sgx_status_t ecall_get_ra_client_pub_sig_key([out] sgx_ec256_public_t* out_key);

		public void ecall_drop_ra_state_to_server([in, string] const char* server_id);

		public sgx_status_t ecall_process_ra_msg0_resp([in, string] const char* server_id, [in] const sgx_ec256_public_t* in_pub_key, int enable_pse, [out] sgx_ra_context_t* out_ctx_id);

		public sgx_status_t ecall_process_ra_msg4([in, string] const char* server_id, [in] const sgx_ias_report_t* in_msg4, [in] const sgx_ec256_signature_t* in_msg4_sign);
	};

};