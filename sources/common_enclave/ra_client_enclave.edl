enclave {
	
	include "../common/sgx_ra_msg4.h"
	
	trusted 
	{
		public sgx_status_t decent_ra_get_ga(sgx_ra_context_t context,
			[out] sgx_ec256_public_t *g_a);

		public sgx_status_t decent_ra_get_ga_only(sgx_ra_context_t context,
			[out] sgx_ec256_public_t *g_a);

		public sgx_status_t decent_ra_proc_msg2_trusted(sgx_ra_context_t context,
			[in]const sgx_ra_msg2_t *p_msg2, /*copy msg2 except quote into enclave */
			[in] const sgx_target_info_t *p_qe_target,
			[out] sgx_report_t *p_report,
			[out] sgx_quote_nonce_t *p_nonce);

		public sgx_status_t decent_ra_get_msg3_trusted(sgx_ra_context_t context,
			uint32_t quote_size,
			[in]sgx_report_t* qe_report,
			[user_check]sgx_ra_msg3_t *p_msg3,
			uint32_t msg3_size);

		
		public sgx_status_t ecall_init_ra_client_environment();

		public sgx_status_t ecall_process_ra_msg0_resp([in, string] const char* ServerID, [in] const sgx_ec256_public_t* inPubKey, int enablePSE, [out] sgx_ra_context_t* outContextID);

		public sgx_status_t ecall_process_ra_msg2([in, string] const char* ServerID, sgx_ra_context_t inContextID);

		public sgx_status_t ecall_process_ra_msg4([in, string] const char* ServerID, [in] const sgx_ra_msg4_t* inMsg4, [in] sgx_ec256_signature_t* inMsg4Sign, sgx_ra_context_t inContextID);
	};

};