enclave {
	
    include "sgx_key_exchange.h"
    include "sgx_trts.h"

	from "sgx_tsgxssl.edl" import *;
    from "sgx_tkey_exchange.edl" import *;
	
	from "common_enclave.edl" import *;
	from "ra_client_enclave.edl" import *;
	from "ra_sp_enclave.edl" import *;
	from "decent_enclave.edl" import *;

	trusted 
	{
		//RA Functions:

		//RA Context Param is not used here.
		public sgx_status_t ecall_get_ra_pub_sig_key(sgx_ra_context_t context, [out] sgx_ec256_public_t* outKey);
		
		//RA Context Param is not used here.
		public sgx_status_t ecall_get_ra_pub_enc_key(sgx_ra_context_t context, [out] sgx_ec256_public_t* outKey);
		
		public void ecall_termination_clean();
		
		public sgx_status_t ecall_get_simple_secret([in, string] const char* clientID, [out] uint64_t* secret, [out] sgx_aes_gcm_128bit_tag_t* outSecretMac);
		
		public sgx_status_t ecall_proc_simple_secret([in, string] const char* clientID, [in] const uint64_t* secret, [in] const sgx_aes_gcm_128bit_tag_t* inSecretMac);
		
		public sgx_status_t ecall_crypto_test([in] sgx_ec256_public_t* peerKey, [out] sgx_ec256_dh_shared_t* sharedKey);

	};

};
